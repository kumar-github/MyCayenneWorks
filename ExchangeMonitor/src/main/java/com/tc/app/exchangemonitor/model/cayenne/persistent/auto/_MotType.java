package com.tc.app.exchangemonitor.model.cayenne.persistent.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;
import org.apache.cayenne.exp.Property;

import com.tc.app.exchangemonitor.model.cayenne.persistent.AllocItemImpExp;
import com.tc.app.exchangemonitor.model.cayenne.persistent.ForecastValue;
import com.tc.app.exchangemonitor.model.cayenne.persistent.Mot;
import com.tc.app.exchangemonitor.model.cayenne.persistent.Parcel;
import com.tc.app.exchangemonitor.model.cayenne.persistent.Shipment;
import com.tc.app.exchangemonitor.model.cayenne.persistent.Tax;

/**
 * Class _MotType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MotType extends CayenneDataObject
{

	private static final long serialVersionUID = 1L;

	public static final String MOT_TYPE_CODE_PK_COLUMN = "mot_type_code";

	public static final Property<String> MOT_TYPE_SHORT_NAME = new Property<String>("motTypeShortName");
	public static final Property<Integer> TRANS_ID = new Property<Integer>("transId");
	public static final Property<List<AllocItemImpExp>> ALLOC_ITEM_IMP_EXPS = new Property<List<AllocItemImpExp>>("allocItemImpExps");
	public static final Property<List<ForecastValue>> FORECAST_VALUES = new Property<List<ForecastValue>>("forecastValues");
	public static final Property<List<Mot>> MOTS = new Property<List<Mot>>("mots");
	public static final Property<List<Parcel>> PARCELS = new Property<List<Parcel>>("parcels");
	public static final Property<List<Shipment>> SHIPMENTS = new Property<List<Shipment>>("shipments");
	public static final Property<List<Tax>> TAXES = new Property<List<Tax>>("taxes");

	public void setMotTypeShortName(String motTypeShortName)
	{
		writeProperty("motTypeShortName", motTypeShortName);
	}

	public String getMotTypeShortName()
	{
		return (String) readProperty("motTypeShortName");
	}

	public void setTransId(Integer transId)
	{
		writeProperty("transId", transId);
	}

	public Integer getTransId()
	{
		return (Integer) readProperty("transId");
	}

	public void addToAllocItemImpExps(AllocItemImpExp obj)
	{
		addToManyTarget("allocItemImpExps", obj, true);
	}

	public void removeFromAllocItemImpExps(AllocItemImpExp obj)
	{
		removeToManyTarget("allocItemImpExps", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<AllocItemImpExp> getAllocItemImpExps()
	{
		return (List<AllocItemImpExp>) readProperty("allocItemImpExps");
	}

	public void addToForecastValues(ForecastValue obj)
	{
		addToManyTarget("forecastValues", obj, true);
	}

	public void removeFromForecastValues(ForecastValue obj)
	{
		removeToManyTarget("forecastValues", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<ForecastValue> getForecastValues()
	{
		return (List<ForecastValue>) readProperty("forecastValues");
	}

	public void addToMots(Mot obj)
	{
		addToManyTarget("mots", obj, true);
	}

	public void removeFromMots(Mot obj)
	{
		removeToManyTarget("mots", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<Mot> getMots()
	{
		return (List<Mot>) readProperty("mots");
	}

	public void addToParcels(Parcel obj)
	{
		addToManyTarget("parcels", obj, true);
	}

	public void removeFromParcels(Parcel obj)
	{
		removeToManyTarget("parcels", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<Parcel> getParcels()
	{
		return (List<Parcel>) readProperty("parcels");
	}

	public void addToShipments(Shipment obj)
	{
		addToManyTarget("shipments", obj, true);
	}

	public void removeFromShipments(Shipment obj)
	{
		removeToManyTarget("shipments", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<Shipment> getShipments()
	{
		return (List<Shipment>) readProperty("shipments");
	}

	public void addToTaxes(Tax obj)
	{
		addToManyTarget("taxes", obj, true);
	}

	public void removeFromTaxes(Tax obj)
	{
		removeToManyTarget("taxes", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<Tax> getTaxes()
	{
		return (List<Tax>) readProperty("taxes");
	}

}
