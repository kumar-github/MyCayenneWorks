package com.tc.app.exchangemonitor.model.cayenne.persistent.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;
import org.apache.cayenne.exp.Property;

import com.tc.app.exchangemonitor.model.cayenne.persistent.Allocation;
import com.tc.app.exchangemonitor.model.cayenne.persistent.CostExtInfo;
import com.tc.app.exchangemonitor.model.cayenne.persistent.InventoryBuildDraw;
import com.tc.app.exchangemonitor.model.cayenne.persistent.InventoryVoyage;

/**
 * Class _Voyage was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Voyage extends CayenneDataObject
{

	private static final long serialVersionUID = 1L;

	public static final String VOYAGE_CODE_PK_COLUMN = "voyage_code";

	public static final Property<Integer> TRANS_ID = new Property<Integer>("transId");
	public static final Property<String> VOYAGE_DESCRIPTION = new Property<String>("voyageDescription");
	public static final Property<String> VOYAGE_STATUS = new Property<String>("voyageStatus");
	public static final Property<List<Allocation>> ALLOCATIONS = new Property<List<Allocation>>("allocations");
	public static final Property<List<CostExtInfo>> COST_EXT_INFOES = new Property<List<CostExtInfo>>("costExtInfoes");
	public static final Property<List<InventoryBuildDraw>> INVENTORY_BUILD_DRAWS = new Property<List<InventoryBuildDraw>>("inventoryBuildDraws");
	public static final Property<List<InventoryVoyage>> INVENTORY_VOYAGES = new Property<List<InventoryVoyage>>("inventoryVoyages");

	public void setTransId(Integer transId)
	{
		writeProperty("transId", transId);
	}

	public Integer getTransId()
	{
		return (Integer) readProperty("transId");
	}

	public void setVoyageDescription(String voyageDescription)
	{
		writeProperty("voyageDescription", voyageDescription);
	}

	public String getVoyageDescription()
	{
		return (String) readProperty("voyageDescription");
	}

	public void setVoyageStatus(String voyageStatus)
	{
		writeProperty("voyageStatus", voyageStatus);
	}

	public String getVoyageStatus()
	{
		return (String) readProperty("voyageStatus");
	}

	public void addToAllocations(Allocation obj)
	{
		addToManyTarget("allocations", obj, true);
	}

	public void removeFromAllocations(Allocation obj)
	{
		removeToManyTarget("allocations", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<Allocation> getAllocations()
	{
		return (List<Allocation>) readProperty("allocations");
	}

	public void addToCostExtInfoes(CostExtInfo obj)
	{
		addToManyTarget("costExtInfoes", obj, true);
	}

	public void removeFromCostExtInfoes(CostExtInfo obj)
	{
		removeToManyTarget("costExtInfoes", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<CostExtInfo> getCostExtInfoes()
	{
		return (List<CostExtInfo>) readProperty("costExtInfoes");
	}

	public void addToInventoryBuildDraws(InventoryBuildDraw obj)
	{
		addToManyTarget("inventoryBuildDraws", obj, true);
	}

	public void removeFromInventoryBuildDraws(InventoryBuildDraw obj)
	{
		removeToManyTarget("inventoryBuildDraws", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<InventoryBuildDraw> getInventoryBuildDraws()
	{
		return (List<InventoryBuildDraw>) readProperty("inventoryBuildDraws");
	}

	public void addToInventoryVoyages(InventoryVoyage obj)
	{
		addToManyTarget("inventoryVoyages", obj, true);
	}

	public void removeFromInventoryVoyages(InventoryVoyage obj)
	{
		removeToManyTarget("inventoryVoyages", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<InventoryVoyage> getInventoryVoyages()
	{
		return (List<InventoryVoyage>) readProperty("inventoryVoyages");
	}

}
